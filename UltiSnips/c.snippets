###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet ifdef "#define ..."
#ifdef ${1}
#endif // end if $1
endsnippet 

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet qtcoremain "main() (main)"
#include <QCoreApplication>

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
	${VISUAL}${0}
	return a.exec();
}
endsnippet

snippet qtappmain "main() (main)"
#include <QApplicaiton>
int main(int argc, char *argv[])
{
    QApplicaiton a(argc, argv);
	${VISUAL}${0}
	return a.exec();
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */})
{
	${2}
}
else
{
	${3:/* else */}
}
endsnippet

# printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
snippet printf "printf .. (printf)"
printf("[%s:%d %s]${1}\n", __FILE__, __LINE__, __FUNCTION__);
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

#zhaoapn-------------------------begin
snippet nth
/********************************************************************
 **   Function:		${1}
 **Description:
 **      Input:
 **     Output:
 **     Return:
 **     Others:
 ********************************************************************/
endsnippet

#add note of file
snippet ntw
 /*
 * This file is part of ${1}
 * Copyright (C) 2014 Beijing Yuan Xin Technology Co.,Ltd. All rights reserved.
 * Authors:
 *       zhao pan <zhaopan@syberos.com>
 *      
 * This software, including documentation, is protected by copyright controlled
 * by Beijing Yuan Xin Technology Co.,Ltd. All rights are reserved.
 */
endsnippet

snippet nt
/*${1}*/
endsnippet

snippet ntm
/*${1}
 *
 */
endsnippet

snippet fixme
//for qml webkit webview port with new webcore, ${1}, modified by zhaopan
endsnippet

snippet adnt
//for ${1}, added by zhaopan
//end added by zhaopan

snippet debug "#ifdef DEBUG"
qDebug() << "[" <<__FILE__ << ":" << __LINE__ <<"]" << "["<<Q_FUNC_INFO<< "]" << ${1};
endsnippet

snippet ifdebug "#ifdef DEBUG"
#ifdef DEBUG
qDebug() << "[" <<__FILE__ << ":" << __LINE__ << "]" << "[" <<Q_FUNC_INFO<< "]" << ${1};
#endif
endsnippet

snippet mdnt
//for ${1}, modified by zhaopan
//end modified by zhaopan
endsnippet
#zhaoapn-------------------------end
# vim:ft=snippets:
